codeFileGuide.txt -- this file provides details for interpreting the contents of code documents and helper documents that I provide links to.

letter 's' at end of word to indicate multiple of a thing, is often omitted

a 'code document' is a formatted text file, usually indicated by a postfix (the few letters after a .) to the file name, which for FRC Java will normally be .java 
for these files ending in .java the required conventions of Java syntax should be followed. violations of syntax standard within code itself (not comment) that would generate a compile error should be reported to me with the line number and first 3 words of the line and error you detect

a 'helper document' normally has postfix of .txt |.html | .md | .shtml | .pdf and does not require any particular formatting but if it's long and you want to specify a particular section for attention, some char. of your choice can be used as line prefixes

'comment' within a code document is text that explains | questions | criticizes the code that follows it. comment can be ignored for purposes of validating code functionality, but could contain useful metadata to indicate a nearby compile error or other problem needing attention.

comment text is formatted differently according to the convention of the code language. example: one character set like // for one line comment, or a start-end  /* */ char. pair or <!-- --> for multi-line comment. text in a document can specify other non-standard token that singly or in start-end pair indicate a comment. In a helper document, a topic HEADING in all upper case should state the significance of the following code text and thus provides an indexing value for finding that text.

many document contain abbreviation for longer terms, with or without a terminal period (.) e.g. ref for reference, w/o for without, and the usual latin ones: v. for vide, cf. for compare... In code docs, object, method, class name are often abbrev. in comment: rI instead of robotInit, tP for teleopPeriodic, rP for robotPeriodic, rC for RobotContainer, [file name].j for [file name].java, or the char * for any character(s), / for a path separator, etc.


my personal context sources can be used for all FRC Java queries; links to these will be added to threads this Collection as queries progress.

Java code for FRC robotics may only execute properly if a series of components, soft and hardware, are version compatible. Unfortunately during the extended FRC build season (Dec - Apr.) their code masters typically make repeated updates to device firmware, coding tools, NI Game Tools, etc. Therefore the year of creation, e.g. '23 (indicating 2023 build season) will often be relevant to functionality, and should be specified, when known, in the file descriptors, which are described next
  

doc descriptors:
sourceType: mostly nouns with optional modifier, e.g. template, example, fragment, framework, vendor, project, robot, command, subsystem, aux, helper, prototype, [number representing software hardware compatibility]
sourceStatus: mostly adjective, e.g. functional, untested, in progress, local, final, archive
sourceContext: mostly noun, number e.g. project name, robot type, date created, season (year) valid, purpose of this code or aux doc